!function(){var o={};o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(o){if("object"==typeof window)return window}}(),("undefined"!=typeof window?window:void 0!==o.g?o.g:"undefined"!=typeof self?self:{}).SENTRY_RELEASE={id:"8b4d5c86991f705b5c13c3df656636cc4465aa48"},function(o){function t(o,t,n,r){if(void 0===n&&(n=function(){}),void 0===r&&(r={}),!o)throw new Error("Target element to observe should be a valid DOM Node");var e=Object.assign({},{viewport:null,modTop:"0px",modRight:"0px",modBottom:"0px",modLeft:"0px",threshold:[0]},r),i=e.viewport,f=e.modTop,u=e.modLeft,d=e.modBottom,a=e.modRight,s=e.threshold;if(!Array.isArray(s)&&"number"!=typeof s)throw new Error("threshold should be a number or an array of numbers");var c=Array.isArray(s)?s.map((function(o){return Math.floor(o%101)/100})):[Math.floor(s?s%101:0)/100],h=Math.min.apply(Math,c),l={root:i instanceof Node?i:null,rootMargin:f+" "+a+" "+d+" "+u,threshold:c},w=new IntersectionObserver((function(r,e){var i=r.filter((function(t){return t.target===o}))[0],f=function(){return e.unobserve(o)};i&&(i.isInViewport=i.isIntersecting&&i.intersectionRatio>=h,i.isInViewport?t(i,f,o):n(i,f,o))}),l);return w.observe(o),function(){return w.unobserve(o)}}o.observeElementInViewport=t,o.isInViewport=function(o,n){return void 0===n&&(n={}),new Promise((function(r,e){try{t(o,(function(o,t){t(),r(!0)}),(function(o,t){t(),r(!1)}),n)}catch(o){e(o)}}))}}(window)}();
//# sourceMappingURL=observe_element_in_viewport.1ff8bdb8684ee1f9a544.js.map